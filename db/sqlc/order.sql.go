// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    user_name,
    order_type_id,
    discount
) VALUES (
    $1, $2, $3
) RETURNING id, user_name, order_type_id, discount, created_at
`

type CreateOrderParams struct {
	UserName    string  `json:"userName"`
	OrderTypeID int64   `json:"orderTypeID"`
	Discount    float64 `json:"discount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.queryRow(ctx, q.createOrderStmt, createOrder, arg.UserName, arg.OrderTypeID, arg.Discount)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.OrderTypeID,
		&i.Discount,
		&i.CreatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_name, order_type_id, discount, created_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.queryRow(ctx, q.getOrderStmt, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.OrderTypeID,
		&i.Discount,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_name, order_type_id, discount, created_at FROM orders
WHERE user_name = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListOrdersParams struct {
	UserName string `json:"userName"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.query(ctx, q.listOrdersStmt, listOrders, arg.UserName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.OrderTypeID,
			&i.Discount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
