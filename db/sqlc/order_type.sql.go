// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: order_type.sql

package db

import (
	"context"
)

const createOrderType = `-- name: CreateOrderType :one
INSERT INTO order_types (
    days,
    price
) VALUES (
    $1, $2
) RETURNING id, days, price
`

type CreateOrderTypeParams struct {
	Days  int64 `json:"days"`
	Price int64 `json:"price"`
}

func (q *Queries) CreateOrderType(ctx context.Context, arg CreateOrderTypeParams) (OrderType, error) {
	row := q.queryRow(ctx, q.createOrderTypeStmt, createOrderType, arg.Days, arg.Price)
	var i OrderType
	err := row.Scan(&i.ID, &i.Days, &i.Price)
	return i, err
}

const getOrderType = `-- name: GetOrderType :one
SELECT id, days, price FROM order_types
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderType(ctx context.Context, id int64) (OrderType, error) {
	row := q.queryRow(ctx, q.getOrderTypeStmt, getOrderType, id)
	var i OrderType
	err := row.Scan(&i.ID, &i.Days, &i.Price)
	return i, err
}

const listOrderTypes = `-- name: ListOrderTypes :many
SELECT id, days, price FROM order_types
ORDER BY id
`

func (q *Queries) ListOrderTypes(ctx context.Context) ([]OrderType, error) {
	rows, err := q.query(ctx, q.listOrderTypesStmt, listOrderTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderType{}
	for rows.Next() {
		var i OrderType
		if err := rows.Scan(&i.ID, &i.Days, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
